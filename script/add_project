#!/usr/bin/env ruby

ENV["RAILS_ENV"] ||= 'add_project'

require 'trollop'

SCMS = %w(git svn hg bzr)

def options_for_scm(scm)
  case scm
  when "svn"
    Trollop::options do
      banner "usage: add svn [project-name] [scm options]"
      opt :repository, "SVN Repository URL", :type => String, :required => true
      opt :username, "SVN Username", :type => String
      opt :password, "SVN Password", :type => String
      opt :interactive, "Enable interactive mode", :default => false
      opt :check_externals, "Tells CC.rb to trigger a build if externals change", :default => true
      opt :path, "The location of an empty directory to check your project out into", :type => String
    end
  when "hg"
    Trollop::options do
      banner "usage: add hg [project-name] [scm options]"
      opt :repository, "Hg Repository URL", :type => String, :required => true
      opt :branch, "Branch for CC.rb to build", :type => String
      opt :path, "The location of an empty directory to check your project out into", :type => String
    end
  when "bzr"
    Trollop::options do
      banner "usage: add bzr [project-name] [scm options]"
      opt :repository, "Bzr Repository URL", :type => String, :required => true
      opt :path, "The location of an empty directory to check your project out into", :type => String
    end
  when "git"
    Trollop::options do
      banner "usage: add git [project-name] [scm options]"
      opt :repository, "Git Repository URL", :type => String, :required => true
      opt :branch, "Branch for CC.rb to build", :type => String
      opt :path, "The location of an empty directory to check your project out into", :type => String
      opt :watch_for_changes_in, "Tell CC.rb to only monitor for changes in this subdirectory", :type => String
    end
  else
    Trollop::die "unknown scm #{scm.inspect}. Available options: (#{SCMS.join(", ")})"
  end
end

global_opts = Trollop::options do
  banner "usage: add [svn|git|hg|bzr] [project-name]"
  opt :trace, 'Print out exception stack traces', :short => '-t'
  stop_on SCMS
end

cmd = ARGV.shift
if ARGV.first and ARGV.first !~ /^-/
  project_name = ARGV.shift
end
scm_options = { :source_control => cmd }
scm_options.merge options_for_scm(cmd)

unless project_name and scm_options[:repository]
  STDERR.puts "Project name and repository location are mandatory"
  STDERR.puts
  exit(-1)
end

# Project Name can only contain alphanumeric characters
if project_name.match /[^-_a-zA-Z0-9]/
  STDERR.puts "'#{project_name}' is not a valid project name. Project name should only contain alphanumeric " +
  'characters, dashes and underscores, and no whitespace.'
  exit(-1)
end

puts "Adding project '#{project_name}' (this may take a while)..."

begin
  source_control = SourceControl.create(scm_options)

  Project.create(project_name, source_control)

  if source_control.repository =~ /^svn\+ssh\:\/\//
    puts "IMPORTANT!!! - It looks like you are connecting to your repository with an svn+ssh connection.  " +
    "For cruise to build this project, you need to have set up authentication caching for ssh, see this article"
    puts "   http://subversion.tigris.org/faq.html#ssh-auth-cache"
    puts
  end

rescue => e
  STDERR.puts "FAILED: #{e.message}"
  if trace
    STDERR.puts e.backtrace.map { |line| "    #{line}" }
  end
  exit(-1)
end

puts "Project '#{project_name}' added."
